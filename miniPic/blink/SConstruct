import platform
import os, sys, platform
sys.path.append(os.path.relpath("../../site_scons"))
import bootloadercmd as b

# env = Environment(PIC = '24FJ64GB002', 
#                   CC = 'pic30-gcc', 
#                   PROGSUFFIX = '.cof', 
#                   CFLAGS = '-g -omf=coff -x c -mcpu=$PIC', 
#                   LINKFLAGS = '-omf=coff -mcpu=$PIC -Wl,--script="app_p24FJ64GB002.gld"', 
#                   CPPPATH = '../lib')
# env.PrependENVPath('PATH', '/Applications/microchip/mplabc30/v3.30c/bin')
# bin2hex = Builder(action = 'pic30-bin2hex $SOURCE -omf=coff',
#                   suffix = 'hex', 
#                   src_suffix = 'cof')
# env.Append(BUILDERS = {'Hex' : bin2hex})
# list = Builder(action = 'pic30-objdump -S -D $SOURCE > $TARGET', 
#                suffix = 'lst', 
#                src_suffix = 'cof')
# env.Append(BUILDERS = {'List' : list})

# Type the filename you want, e.g. blink
# Don't include the .c tag
file_to_run = 'mputest'

def setup_PIC_env():
  # env = Environment(PIC = '24FJ128GB206', 
  #                   CC = 'xc16-gcc', 
  #                   PROGSUFFIX = '.cof', 
  #                   CFLAGS = '-g -omf=coff -x c -mcpu=$PIC', 
  #                   LINKFLAGS = '-omf=coff -mcpu=$PIC -Wl,--script="app_p24FJ128GB206.gld"', 
  #                   CPPPATH = '../../lib')
  # if platform.system() == 'Linux':
  #   env.PrependENVPath('PATH', '/opt/microchip/xc16/v1.24/bin')
  # elif platform.system() == 'Darwin':
  #   env.PrependENVPath('PATH', '/Applications/microchip/xc16/v1.24/bin')
  # bin2hex = Builder(action = 'xc16-bin2hex $SOURCE -omf=coff',
  #                   suffix = 'hex', 
  #                   src_suffix = 'cof')
  # env.Append(BUILDERS = {'Hex' : bin2hex})
  # build_list = Builder(action = 'xc16-objdump -S -D $SOURCE > $TARGET -omf=coff',
  #                suffix = 'lst', 
  #                src_suffix = 'cof')
  # env.Append(BUILDERS = {'List' : build_list})
  # return env
  env = Environment(PIC = '24FJ64GB002', 
                    CC = 'xc16-gcc', 
                    PROGSUFFIX = '.cof', 
                    CFLAGS = '-g -omf=coff -x c -mcpu=$PIC', 
                    LINKFLAGS = '-omf=coff -mcpu=$PIC -Wl,--script="app_p24FJ64GB002.gld"', 
                    CPPPATH = '../lib')
  if platform.system() == 'Linux':
    env.PrependENVPath('PATH', '/opt/microchip/xc16/v1.24/bin')
  elif platform.system() == 'Darwin':
    env.PrependENVPath('PATH', '/Applications/microchip/xc16/v1.24/bin')
  bin2hex = Builder(action = 'xc16-bin2hex $SOURCE -omf=coff',
                    suffix = 'hex', 
                    src_suffix = 'cof')
  env.Append(BUILDERS = {'Hex' : bin2hex})
  build_list = Builder(action = 'xc16-objdump -S -D $SOURCE > $TARGET -omf=coff',
                 suffix = 'lst', 
                 src_suffix = 'cof')
  env.Append(BUILDERS = {'List' : build_list})
  return env

def load_function(target, source, env):
    bl = b.bootloadercmd()
    bl.import_hex(source[0].rstr())
    try:
      bl.write_device()
      bl.bootloader.start_user()
      bl.bootloader.close()
    except:
      print('FAILED to write to device. Is it plugged in?')
    return None

load = Builder(action=load_function,
               suffix = 'none',
               src_suffix = 'hex')

env.Append(BUILDERS = {'Load' : load})

env.Program('blink', ['blink.c',
                      '../lib/timer.c',
                      '../lib/pin.c',
                      '../lib/spi.c', 
                      'xl.c'])
env.Hex('blink')
env.List('blink')
env.Load('blink')
